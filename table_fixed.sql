CREATE DATABASE IF NOT EXISTS Music;
USE Music;

CREATE TABLE Artist (
    ArtistID INT AUTO_INCREMENT PRIMARY KEY,
    ArtistName VARCHAR(100) NOT NULL,
    Country VARCHAR(50),
    Style VARCHAR(100),
    City VARCHAR(50),
    DateOfBirth DATE,
    Phone VARCHAR(15),
    Email VARCHAR(100) UNIQUE
);
CREATE TABLE Genres (
    GenreID INT AUTO_INCREMENT PRIMARY KEY,
    GenreName VARCHAR(50) NOT NULL UNIQUE
);
CREATE TABLE Album (
    AlbumID INT AUTO_INCREMENT PRIMARY KEY,
    AlbumName VARCHAR(100) NOT NULL,
    PublishedDate DATE,
    ArtistID INT NOT NULL,
    NumberOfTracks INT DEFAULT 0,
    FOREIGN KEY (ArtistID) REFERENCES Artist(ArtistID) ON DELETE CASCADE
);
CREATE TABLE Songs (
    SongID INT AUTO_INCREMENT PRIMARY KEY,
    SongName VARCHAR(100) NOT NULL,
    Duration INT NOT NULL CHECK(Duration > 0),
    PublishedDate DATE,
    Language VARCHAR(50),
    AlbumID INT NOT NULL,
    GenreID INT NOT NULL,
    FOREIGN KEY (AlbumID) REFERENCES Album(AlbumID) ON DELETE CASCADE,
    FOREIGN KEY (GenreID) REFERENCES Genres(GenreID) ON DELETE CASCADE
);
CREATE TABLE Users (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    UserName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE,
    JoinedDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    Member ENUM('NORMAL', 'PREMIUM') DEFAULT 'NORMAL',
    Address VARCHAR(100),
    City VARCHAR(50),
    Country VARCHAR(50) NOT NULL
);
CREATE TABLE Playlists (
    PlaylistID INT AUTO_INCREMENT PRIMARY KEY,
    PlaylistName VARCHAR(100) NOT NULL,
    CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    UserID INT NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
CREATE TABLE Playlist_Songs (
    PlaylistID INT NOT NULL,
    SongID INT NOT NULL,
    PRIMARY KEY (PlaylistID, SongID),
    FOREIGN KEY (PlaylistID) REFERENCES Playlists(PlaylistID) ON DELETE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON DELETE CASCADE
);
CREATE TABLE Ratings (
    RatingID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL,
    SongID INT NOT NULL,
    Rating TINYINT CHECK(Rating BETWEEN 1 AND 5),
    Review TEXT,
    CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON DELETE CASCADE
);
CREATE TABLE ArtistFollow (
    FollowID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL,
    ArtistID INT NOT NULL,
    FollowDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ArtistID) REFERENCES Artist(ArtistID) ON DELETE CASCADE
);
CREATE TABLE Library (
    LibraryID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL, -- Thư viện gắn với người dùng
    LibraryName VARCHAR(100) NOT NULL, -- Tên thư viện (ví dụ: "Thư viện chính", "Thư viện yêu thích")
    CreatedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    Type ENUM('FAVORITE', 'PERSONAL', 'SHARED') DEFAULT 'PERSONAL', -- Loại thư viện
    TotalSongs INT DEFAULT 0 CHECK (TotalSongs >= 0), -- Tổng số bài hát trong thư viện
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);
CREATE TABLE Library_Songs (
    LibraryID INT NOT NULL,
    SongID INT NOT NULL,
    AddedDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (LibraryID, SongID),
    FOREIGN KEY (LibraryID) REFERENCES Library(LibraryID) ON DELETE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Songs(SongID) ON DELETE CASCADE
);
